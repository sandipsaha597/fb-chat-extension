{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLoggedIn","userID","name","email","picture","defaultProps","shouldShowDialog","htmlRef","undefined","minimized","themeColor","loggedInGreeting","loggedOutGreeting","greetingDialogDisplay","greetingDialogDelay","autoLogAppEvents","xfbml","version","language","debug","onCustomerChatDialogShow","onCustomerChatDialogHide","responseFacebook","res","console","log","_this","setState","data","url","componentClicked","fbContent","this","react_default","a","createElement","src","alt","facebook_login_with_button_default","appId","autoLoad","fields","onClick","callback","className","id","lib_default","pageId","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAqFeA,oNA7EbC,MAAQ,CACNC,YAAY,EACZC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,aAAc,CACZC,kBAAkB,EAClBC,aAASC,EACTC,eAAWD,EACXE,gBAAYF,EACZG,sBAAkBH,EAClBI,uBAAmBJ,EACnBK,2BAAuBL,EACvBM,yBAAqBN,EACrBO,kBAAkB,EAClBC,OAAO,EACPC,QAAS,OACTC,SAAU,QACVC,OAAO,EACPC,8BAA0BZ,EAC1Ba,8BAA0Bb,MAI9Bc,iBAAmB,SAAAC,GACjBC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CACZ3B,YAAY,EACZC,OAAQsB,EAAItB,OACZC,KAAMqB,EAAIrB,KACVE,QAASmB,EAAInB,QAAQwB,KAAKC,SAI9BC,iBAAmB,kBAAMN,QAAQC,IAAI,oFAGnC,IAAIM,EAkBJ,OAhBEA,EADCC,KAAKjC,MAAMC,WAEViC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,KAAKjC,MAAMK,QAASiC,IAAKL,KAAKjC,MAAMG,OAC9C+B,EAAAC,EAAAC,cAAA,qBAAaH,KAAKjC,MAAMG,OAIf+B,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACXK,MAAM,kBACNC,UAAU,EACVC,OAAO,qBACPC,QAASV,KAAKF,iBACda,SAAUX,KAAKV,mBAKjBW,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,WAAMJ,GACNE,EAAAC,EAAAC,cAAA,OAAKU,GAAG,aAEVZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACEa,OAAO,kBACPR,MAAM,4BAlEES,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1f2ae03.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport FacebookLogin from 'react-facebook-login'\nimport MessengerCustomerChat from 'react-messenger-customer-chat';\n\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    isLoggedIn: false,\n    userID: '',\n    name: '',\n    email: '',\n    picture: '',\n    defaultProps: {\n      shouldShowDialog: false,\n      htmlRef: undefined,\n      minimized: undefined,\n      themeColor: undefined,\n      loggedInGreeting: undefined,\n      loggedOutGreeting: undefined,\n      greetingDialogDisplay: undefined,\n      greetingDialogDelay: undefined,\n      autoLogAppEvents: true,\n      xfbml: true,\n      version: '2.11',\n      language: 'en_US',\n      debug: false,\n      onCustomerChatDialogShow: undefined,\n      onCustomerChatDialogHide: undefined,\n    },\n  }\n\n  responseFacebook = res => {\n    console.log(res)\n    this.setState({\n      isLoggedIn: true,\n      userID: res.userID,\n      name: res.name,\n      picture: res.picture.data.url\n    })\n  }\n\n  componentClicked = () => console.log('clicked')\n\n  render() {\n    let fbContent;\n    if(this.state.isLoggedIn) {\n      fbContent = (\n        <div>\n          <img src={this.state.picture} alt={this.state.name} />\n          <h2>Welcome {this.state.name}</h2>\n        </div>\n      )\n    } else {\n      fbContent = (<FacebookLogin\n        appId=\"675602469560157\"\n        autoLoad={true}\n        fields=\"name,email,picture\"\n        onClick={this.componentClicked}\n        callback={this.responseFacebook} />\n      )\n    }\n\n    return (  \n      <div className=\"App\">\n        <div className='container'>\n          <h1>fb authentication</h1>\n          <div>{fbContent}</div>\n          <div id=\"fb-root\"></div>\n        </div>\n        <MessengerCustomerChat\n          pageId=\"280779816200589\"\n          appId=\"665101350617637\"\n        />\n      </div>\n    );\n  }\n}\n          // htmlRef={this.defaultProps}\n\n          // <div class=\"fb-customerchat\"\n          //   attribution=setup_tool\n          //   page_id=\"280779816200589\">\n          // </div>\nexport default App;\n    // window.fbAsyncInit = function() {\n    //   FB.init({\n    //     xfbml            : true,\n    //     version          : 'v3.3'\n    //   });\n    // };\n\n    // (function(d, s, id) {\n    // var js, fjs = d.getElementsByTagName(s)[0];\n    // if (d.getElementById(id)) return;\n    // js = d.createElement(s); js.id = id;\n    // js.src = 'https://connect.facebook.net/en_US/sdk/xfbml.customerchat.js';\n    // fjs.parentNode.insertBefore(js, fjs);\n    // }(document, 'script', 'facebook-jssdk'))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}